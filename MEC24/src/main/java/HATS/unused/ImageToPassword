// imageToText()
// hashPassword()
// saveToFile()

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.imageio.ImageIO;

public class ImageToPassword {

    // Method to read an image and convert its RGB values to a plain text string
    public static String imageToText(String imagePath) {
        StringBuilder text = new StringBuilder();

        try {
            // Load the image
            File inputFile = new File(imagePath);
            BufferedImage image = ImageIO.read(inputFile);

            // Extract RGB values from the image
            for (int y = 0; y < image.getHeight(); y++) {
                for (int x = 0; x < image.getWidth(); x++) {
                    int rgb = image.getRGB(x, y);

                    // Extract the red, green, and blue components
                    int red = (rgb >> 16) & 0xFF;
                    int green = (rgb >> 8) & 0xFF;
                    int blue = rgb & 0xFF;

                    // Convert the RGB values to text and append to the StringBuilder
                    text.append(red).append(green).append(blue);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return text.toString();
    }

    // Method to hash the plain text (e.g., SHA-512) to use as a password
    public static String hashPassword(String plainText) {
        try {
            // Use SHA-512 to hash the plain text
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] hashBytes = md.digest(plainText.getBytes());

            // Convert the hash bytes to a hexadecimal string
            BigInteger number = new BigInteger(1, hashBytes);
            StringBuilder hexString = new StringBuilder(number.toString(16));

            // Pad with leading zeros to make the length 128 characters
            while (hexString.length() < 128) {
                hexString.insert(0, '0');
            }

            String cleanedHash = hexString.toString().replaceFirst("^0+", "");
            return cleanedHash;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    // Method to save the password (hashed or plain text) to a file
    public static void saveToFile(String data, String filePath) throws IOException {
        FileWriter writer = new FileWriter(filePath);
        writer.write(data);
        writer.close();
    }

    // Main method
    public static void main(String[] args) {
        String imagePath = "C:\\Users\\OWNER\\Downloads\\FilePath\\download.png";  // Replace with the path to your image
        String outputFilePath = "C:\\Users\\OWNER\\Downloads\\FilePath\\hashOutput3.txt";  // Output file to store the password

        // Step 1: Convert image to plain text
        String plainTextPassword = imageToText("C:\\Users\\OWNER\\Downloads\\FilePath\\download.png");
        System.out.println("Plain text password from image: " + plainTextPassword);

        // Step 2: Hash the plain text (to use it as a password)
        String hashedPassword = hashPassword(plainTextPassword);
        System.out.println("Hashed password: " + hashedPassword);

        // Remove leading zeros using a regular expression
        String cleanedHash = hashedPassword.replaceFirst("^0+", "");

        // Step 3: Save the hashed password to a file
        try {
            saveToFile(cleanedHash, "C:\\Users\\OWNER\\Downloads\\FilePath\\hashOutput3.txt");
            System.out.println("Hashed password saved to file: " + outputFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
